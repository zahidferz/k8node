
pool:
  vmImage: 'Ubuntu-16.04'

trigger:
  branches:
    include:
    - master
    - develop
pr: none

resources:      
  repositories: 
  - repository: gx-devops-yamls
    name: gestionix/gx-devops-yamls
    type: github
    endpoint: gx-github
    ref: master #branch name

stages:
- stage: dev
  displayName: dev

  jobs:
  - job: Initial
    displayName: Initial
    steps:
    - task: AzureCLI@1
      displayName: Determining KeyVault
      inputs:
        azureSubscription: $(azureSubscriptionEndpoint)
        scriptLocation: inlineScript
        inlineScript: |
          ValueVault="$(Build.DefinitionName)-$(System.StageName)"
          KeyVault="$(az keyvault secret show --vault-name Eleva-Core-KeyVault --name $ValueVault --query value -o tsv)"
          echo "---$KeyVault----"
          echo "##vso[task.setvariable variable=Name;isOutput=true]$KeyVault"
      name: KeyVault
  
    - task: AzurePowerShell@4
      displayName: 'Apply Secrets'
      inputs:
        azureSubscription: '$(azureSubscriptionEndpoint)'
        ScriptType: 'InlineScript'
        Inline: |
          $keys = (Get-AzKeyVaultSecret  -VaultName $(KeyVault.Name)).name 
          $key= $keys.Split(" ")
          $keyvalue= @{}
          foreach ($value in $key ){
              $secretstore=(Get-AzKeyVaultSecret  -VaultName $(KeyVault.Name) -name $value).SecretValueText
              $keystore=$value.Replace("-","_")
              if ($secretstore -match 'azurewebsites.net' -and $secretstore -notlike '*fn*' -and $secretstore -notlike '*functions*' -and $secretstore -notlike '*gestionix*'){
              $secretstore=$secretstore -match '(?<=\/\/)(.*?)(?=\.)'
              $secretstore=$Matches[0]
              }elseif ($secretstore -like 'https://app-dev.chain.inc') {
              $secretstore='https://https://work.eleva.inc'
              }
              Add-Content $(System.DefaultWorkingDirectory)/env.txt "$keystore=$secretstore"
          }
          get-content $(System.DefaultWorkingDirectory)/env.txt
          ((Get-Content -path $(System.DefaultWorkingDirectory)/kustomization.yaml) -replace 'KEYVAULT-SECRET', "$(KeyVault.Name)") | Set-Content -Path $(System.DefaultWorkingDirectory)/kustomization.yaml
          kubectl apply -k $(System.DefaultWorkingDirectory)
        azurePowerShellVersion: 'LatestVersion'
        

#    - task: Kubernetes@1
#      displayName: 'k apply deployment'
#      inputs:
#        connectionType: 'Kubernetes Service Connection'
#        kubernetesServiceEndpoint: 'Keleva'
#        command: 'apply'
#        useConfigurationFile: true
#        configuration: '$(System.DefaultWorkingDirectory)/deploy.yaml'

    - task: HelmDeploy@0
      displayName: 'Package Chart'
      inputs:
        command: 'package'
        chartPath: '$(System.DefaultWorkingDirectory)/k8chart'
        destination: '$(System.DefaultWorkingDirectory)'
        arguments: '--app-version v1.0.1'

    - task: HelmDeploy@0
      displayName: 'Deploy Chart'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: 'Keleva'
        namespace: 'kv'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: '$(System.DefaultWorkingDirectory)/node-1.0.0.tgz'
        releaseName: '$(Build.DefinitionName)'
        overrideValues: 'timestamp=v$(Build.BuildNumber)'



